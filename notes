•	By default the value of the object if printed is NULL 
•	This.name :Here the this is replaced with the name of the object which is calling
•	New keyword creates the object
•	Student kunal = new Student()
Here the Student() is the constructor which is being called or function you can say 
•	Instance Variables: Variables which are inside a class
•	Constructor overloading: having multiple constructors

•	Calling a constructor from another Constructor 

•	Student one= new Student()
Student two=one
If we make changes in one or two they will be reflected in both of them

•	Final is not modifyable but only for primitive data types
When  a non primitive is final, you cannot reassign it
	
•	Garbage collector using finalize 
We can only tell in finalize what to do when a file is being destroyed, when we create large number of object to it

--------------------------------------------------------------------------------------------------------------------------------------------------

•	Packages are just folders
•	If the files are in same folder we don’t have to import 
•	A static variable is independent of the object created like population
Instead of using this.population, we will use human.population (human is class name) 
We can access the static variables using the name of the class itself 
As the class is created before the object is created, so we can access the object directly using class name 
The static method or variable belong to the class and do not belong to the object
We don’t need an object to run static stuff, they can be run with the help of a class 
IN SHORT STATIC IS NOT DEPENDENT ON OBJECT MAKING
•	Why is main as Public static void main 
It is static as if it was not static we would need an object to run the main, as it is inside the class. But how can we create an object of the main before running the program as main is the first thing which is run.
•	A static method can only access other static method
•	A static block is run only once when the first object is created
Static{
	B=A*5;
}
•	Singleton class only creates only 1 object 

--------------------------------------------------------------------------------------------------------------------------------------------------

Inheritance: As properties of the parent class as well as their own characteristic( which is of child class ) 

If we want to initialise the values present in parent class JUST ABOVE the child class
we will use super keyword 
super(l,w,h)

agar private hai toh we can only use it inside a class ( agar parent mai private hai kuch toh child can't access it )  

If we write Box box = new BoxWeight() it is right
and we can use all the methods which are only inside the box not boxweight


BUT IF WE WRITE  BoxWeight box= new Box() THIS IS NOT RIGHT AS THE BOX() CANNOT MODIFY THE WEIGHT PROPERTY OF THE BOXWEIGHT AS ONLY THE CHILD ( BOXWEIGHT) HAS THE PROPERTY OF THE WEIGHT AND THE box IS REFERENCED TO BOX()

multiple inheritance is not allowed in java

heirarchiel inheritance 

POLYMORPHSIM: MANY + WAYS TO REPRESENT

TYPES OF POLYMORPHISM 
1) COMPILE TIME/ STATIC: ACHEIVED VIA METHOD OVERLOADING

SAME NAME OF METHODS BUT HAVE SOMETHING DIFFERENT LIKE DIFFERENT NUMBER OF PARAMETERS, DIFFERENT RETURN TYPES ETC

2) RUNTIME/ DYNAMIC: ACHEIVED VIA METHOD OVERRIDING

IF THE PARENT AND THE CHILD METHOD HAVE THE METHOD WITH SAME NAME THEN THE METHOD IN THE CHILD CLASS WILL BE CALLED AS IT IS OVERRIDDEN 

IF WE DO
shapes circle= new circle()
circle.area() 
this will also call the circle class ke andr wla area as it is overridden by the child class
but if we write suppose circle.a and the a variable is in the circle class, it will result in an error as it will not be able to access the a variable as it is in the circle class and we have shape instance


IF WE USE THE FINAL KEYWORD IN THE PARENT CLASS METHOD THEN WE CANNOT OVERRIDE THAT METHOD IN THE CHILD CLASS

WE CAN ALSO PREVENT INHERITANCE USING FINAL CLASS 

WE ALSO CANNOT OVVERIDE STATIC METHODS, AS THE OVERRIDING DEPENEDS ON THE OBJECT ( circle() ) BUT AS WE KNOW STATIC METHODS DOES NOT DEPEND ON THE OBJECT, SO JO STATIC METHOD IS IN PARENT WILL ONLY GET PRINTED

encapsulation: one inside another 

abstraction: hiding the details and showing only valuable information 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF WE USE PRIVATE VARIABLES INSIDE A CLASS IT CAN BE ONLY ACCESSED IN THE CLASS ITSELF, AND IF SOME OTHER CLASS WANTS TO MODIFY IT WE CAN DO IT USING GETTER AND SETTER 

            │ Class │ Package │ Subclass │ Subclass │ World
            │       │         │(same pkg)│(diff pkg)│(diff pkg & not subclass)
────────────┼───────┼─────────┼──────────┼──────────┼──────────────────────────
public      │   +   │    +    │    +     │     +    │   +
────────────┼───────┼─────────┼──────────┼──────────┼──────────────────────────
protected   │   +   │    +    │    +     │     +    │
────────────┼───────┼─────────┼──────────┼──────────┼──────────────────────────
no modifier │   +   │    +    │    +     │          │
────────────┼───────┼─────────┼──────────┼──────────┼──────────────────────────
private     │   +   │         │          │          │

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF WE HAVE AN ABSTRACT PARENT CLASS, THEN THE CHILD WHICH EXTENDS THE PARENT NEEDS TO OVERRIDE ALL THE ABSTRACT METHODS WHICH ARE IN PARENT CLASS 

abstract void partner() : abstract method in parent class

FOR ABSTRACT CLASSES YOU CANNOT CREATE OBJECTS DIRECTLY

IF EVEN 1 OF THE METHODS IS ABSTRACT THEN THE CLASS NEEDS TO BE ABSTRACT

FINAL VARIABLES ALWAYS NEEDS TO BE INTIALIZED

IMPLEMENTS IS USED FOR INTERFACES AND INTERFACES CAN DO MULTIPLE INHERITANCE

Interface is like class but not completely. it is like an abstract class.
By default functions are public and abstract in interface.
variables are final and static by default in interface.

IF INTERFACE DOES NOT CARE ABOUT THE NUMBER OF CHILDREN THAT IMPLEMENT IT 

WE CAN ALWAYS DO 

PARENT VARIABLE = NEW CHILD()

IF WE HAVE AN INTERFACE A HAVING FUN() METHOD AND WE HAVE ANOTHER CLASS B WHICH HAS GREET() METHOD


INTERFACE TO INTERFACE WE HAVE TO WRITE EXTENDS
INTERFACE TO CLASS WE HAVE TO WRITE IMPLEMENTS

IF THE CLASS B EXTENDS CLASS A 
AND IF WE IMPLEMENT CLASS B IN SOME CLASS 
SO THAT CLASS NEEDS TO OVERRIDE CLASS A METHODS AS WELL AS CLASS B METHODS

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXCEPTION HANDLING
CHECKED (compiler can detect ) and UNCHECKED ( compiler cannot detect, during runtime. for eg: dividing a number by zero)

using try ( to try an expression ) and catch block (to catch an exception if it occurs)
we also have a finally block which does not care if a exception is thrown or not and runs anyway

catch(Exception e){
	System.out.println("exception found")
} 


we can also throw an exception using the throw keyword
throw new Exception("your own message")

and we have to use the throws keyword in the method which can throw an exception


creating a custom exception
class Myexception extends exception{
	Myexception(){
		super(message) # as this is covered in the parent class 
	}
} 

